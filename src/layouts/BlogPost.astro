---
import type { MarkdownHeading } from 'astro'
import type { CollectionEntry } from 'astro:content'

// Plugin styles
import 'katex/dist/katex.min.css'

import { Comment, MediumZoom } from 'astro-pure/advanced'
import { ArticleBottom, Copyright, Hero, TOC } from 'astro-pure/components/pages'
import PageLayout from '@/layouts/ContentLayout.astro'
import { integ } from '@/site-config'
import CopyPageButton from '@/components/blog/CopyPageButton.astro'

interface Props {
  post: CollectionEntry<'blog'>
  posts: CollectionEntry<'blog'>[]
  headings: MarkdownHeading[]
  remarkPluginFrontmatter: Record<string, unknown>
}

const {
  post: { id, data, body },
  posts,
  headings,
  remarkPluginFrontmatter
} = Astro.props

const {
  description,
  heroImage,
  publishDate,
  title,
  updatedDate,
  draft: isDraft,
  comment: enableComment
} = data

const socialImage = heroImage
  ? typeof heroImage.src === 'string'
    ? heroImage.src
    : heroImage.src.src
  : '/images/social-card.png'
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString()
const primaryColor = data.heroImage?.color ?? 'hsl(var(--primary) / var(--un-text-opacity))'
---

<PageLayout
  meta={{ articleDate, description, ogImage: socialImage, title }}
  highlightColor={primaryColor}
  back='/blog'
>
  {!!headings.length && <TOC {headings} slot='sidebar' />}

  <div slot='header' class='relative'>
    <Hero {data} {remarkPluginFrontmatter} />
    <div id='copy-page-container' style='display: none;'>
      <CopyPageButton markdown={body} />
    </div>
  </div>

  <slot />

  <Fragment slot='bottom'>
    {/* Copyright */}
    <Copyright {data} />
    {/* Article recommend */}
    <ArticleBottom collections={posts} {id} class='mt-3 sm:mt-6' />
    {/* Comment */}
    {!isDraft && enableComment && <Comment class='mt-3 sm:mt-6' />}
  </Fragment>

  <slot name='bottom-sidebar' slot='bottom-sidebar' />
</PageLayout>

{integ.mediumZoom.enable && <MediumZoom />}

<script>
  // Move copy button next to the article title
  document.addEventListener('DOMContentLoaded', () => {
    const titleElement = document.querySelector('.article-info h1')
    const copyContainer = document.getElementById('copy-page-container')
    
    if (titleElement && copyContainer) {
      // Create a flex wrapper for title + button
      const wrapper = document.createElement('div')
      wrapper.className = 'flex flex-wrap items-center justify-between gap-3 mt-4 sm:mt-6'
      
      // Get the title's classes and text
      const titleClasses = titleElement.className
      titleElement.className = titleClasses + ' flex-1 min-w-0'
      
      // Insert wrapper before title
      titleElement.parentNode?.insertBefore(wrapper, titleElement)
      
      // Move title and button into wrapper
      wrapper.appendChild(titleElement)
      copyContainer.style.display = 'block'
      wrapper.appendChild(copyContainer)
    }
  })
</script>
